const API_BASE = 'http://api.meteordub.uz/api'
const SESSION_KEY = 'my_app_session' 
const ACCESS_TOKEN_KEY = 'access_token'
const REFRESH_TOKEN_KEY = 'refresh_token'

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let isRefreshing = false;
// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let failedQueue = [];

/**
 * Saves the user object, access token, and refresh token to localStorage.
 * Assumes the input data structure is { access, refresh, user } for login/signup,
 * or the user object itself for fetchMe.
 */
function saveSession(data) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ data –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º (–¥–ª—è login/signup) –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è fetchMe)
  const userObject = data.user || data; 

  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ URL –∞–≤–∞—Ç–∞—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç avatar_url, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ)
  if (userObject && userObject.avatar_url) {
    userObject.avatar = userObject.avatar_url;
  }
  
  localStorage.setItem(SESSION_KEY, JSON.stringify(userObject))
  if (data.access) localStorage.setItem(ACCESS_TOKEN_KEY, data.access)
  if (data.refresh) localStorage.setItem(REFRESH_TOKEN_KEY, data.refresh)
}

// ------------------------------------------------------------------
// LOCAL STORAGE GETTERS/SETTERS
// ------------------------------------------------------------------

export function getAccessToken() {
    return localStorage.getItem(ACCESS_TOKEN_KEY);
}

export function getRefreshToken() {
    return localStorage.getItem(REFRESH_TOKEN_KEY);
}

export function currentUser() {
  try {
    return JSON.parse(localStorage.getItem(SESSION_KEY) || 'null')
  } catch {
    return null
  }
}

export function isAuthenticated() {
  return !!currentUser()
}

export function logout() {
  localStorage.removeItem(SESSION_KEY)
  localStorage.removeItem(ACCESS_TOKEN_KEY)
  localStorage.removeItem(REFRESH_TOKEN_KEY)
  // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  failedQueue = [];
}

// ------------------------------------------------------------------
// TOKEN REFRESH LOGIC
// ------------------------------------------------------------------

/**
 * üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Refresh Token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ Access Token.
 * @returns {Promise<string|null>} –ù–æ–≤—ã–π access token –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 */
async function refreshToken() {
  const refreshTokenValue = getRefreshToken();
  if (!refreshTokenValue) {
    logout();
    return null;
  }

  try {
    const res = await fetch(`${API_BASE}/refresh/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ refresh: refreshTokenValue }),
    });

    const data = await res.json();

    if (res.ok && data.success && data.data.access) {
      // üö® –í–∞–∂–Ω–æ: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ access —Ç–æ–∫–µ–Ω (refresh –º–æ–∂–µ—Ç –æ—Å—Ç–∞—Ç—å—Å—è –ø—Ä–µ–∂–Ω–∏–º)
      localStorage.setItem(ACCESS_TOKEN_KEY, data.data.access);
      
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if (data.data.refresh) {
          localStorage.setItem(REFRESH_TOKEN_KEY, data.data.refresh);
      }

      return data.data.access;
    } else {
      // –ï—Å–ª–∏ refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      logout();
      return null;
    }
  } catch (err) {
    console.error('Refresh token error:', err);
    logout();
    return null;
  }
}

// ------------------------------------------------------------------
// AUTH API CALLS
// ------------------------------------------------------------------

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.
 * @param {string} url 
 * @param {object} options 
 * @returns {Promise<Response>}
 */
async function authenticatedFetch(url, options) {
  let token = getAccessToken();
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  options.headers = {
    ...options.headers,
    'Authorization': `Bearer ${token}` 
  };
  
  let response = await fetch(url, options);

  // 1. –ï—Å–ª–∏ 401 –∏ –º—ã —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, —Å—Ç–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
  if (response.status === 401 && isRefreshing) {
    return new Promise((resolve, reject) => {
      failedQueue.push({ resolve, reject, url, options });
    });
  }

  // 2. –ï—Å–ª–∏ 401 –∏ –º—ã –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (response.status === 401 && !isRefreshing) {
    isRefreshing = true;
    
    // –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏–ª 401, —Ç–æ–∂–µ —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
    const originalRequest = new Promise((resolve, reject) => {
      failedQueue.push({ resolve, reject, url, options });
    });
    
    try {
      const newAccessToken = await refreshToken();
      
      if (newAccessToken) {
        // –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        failedQueue.forEach(p => {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          p.options.headers['Authorization'] = `Bearer ${newAccessToken}`;
          fetch(p.url, p.options).then(p.resolve).catch(p.reject);
        });
        failedQueue = [];
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        return originalRequest; 
      }
    } catch (e) {
      // –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –≤—ã—Ö–æ–¥–∏–º
      failedQueue.forEach(p => p.reject(new Error('Token refresh failed')));
      failedQueue = [];
      logout();
      return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π 401
    } finally {
      isRefreshing = false;
    }
  }
  
  return response;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è authenticatedFetch.
 */
export async function fetchMe() {
    if (!isAuthenticated()) return null;

    try {
        // üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –æ–±–µ—Ä—Ç–∫—É, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ 401
        const res = await authenticatedFetch(`${API_BASE}/me/`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
        });

        if (res.ok) {
            const responseData = await res.json();
            
            const user = responseData.data; 

            if (user) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                saveSession(user);
                return user;
            }
        } 
        
        // –ï—Å–ª–∏ res.status === 401, —ç—Ç–æ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ authenticatedFetch
        if (res.status === 401) {
            return null;
        }

    } catch (err) {
        console.error('Fetch Me error:', err);
    }
    return null; 
}


export async function signup({ email, password, name }) {
  try {
    const res = await fetch(`${API_BASE}/register/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email,
        password,
        full_name: name,
      }),
    });

    const data = await res.json();

    if (!res.ok || !data.success) {
      return { ok: false, message: data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', errors: data?.errors };
    }
    
    const registrationData = data.data; 

    if (!registrationData || !registrationData.access || !registrationData.user) {
        return { ok: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.' };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveSession(registrationData);

    return { ok: true, user: currentUser() };
  } catch (err) {
    console.error('Signup error:', err);
    return { ok: false, message: '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç' };
  }
}


export async function login({ email, password }) {
  // –õ–æ–≥–∏–∫–∞ login –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç access token
  try {
    const res = await fetch(`${API_BASE}/login/`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    const data = await res.json()

    if (!res.ok || !data.success) {
      return { ok: false, message: data?.message || '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email yoki parol' }
    }
    
    const loginData = data.data;

    if (!loginData || !loginData.access || !loginData.user) {
        return { ok: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.' }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveSession(loginData)

    return { ok: true, user: currentUser() } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  } catch (err) {
    console.error('Login error:', err)
    return { ok: false, message: '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç' }
  }
}

// üí° –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º authenticatedFetch –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö API-—Å–µ—Ä–≤–∏—Å–∞—Ö
export { authenticatedFetch };